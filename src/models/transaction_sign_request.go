// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionSignRequest transaction sign request
// swagger:model TransactionSignRequest
type TransactionSignRequest struct {

	// address indexes
	AddressIndexes []int64 `json:"address_indexes"`

	// coins
	// Required: true
	Coins []string `json:"coins"`

	// hours
	// Required: true
	Hours []string `json:"hours"`

	// input indexes
	// Required: true
	InputIndexes []uint32 `json:"input_indexes"`

	// inputs
	// Required: true
	Inputs []string `json:"inputs"`

	// output addresses
	// Required: true
	OutputAddresses []string `json:"output_addresses"`
}

// Validate validates this transaction sign request
func (m *TransactionSignRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputIndexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionSignRequest) validateCoins(formats strfmt.Registry) error {

	if err := validate.Required("coins", "body", m.Coins); err != nil {
		return err
	}

	return nil
}

func (m *TransactionSignRequest) validateHours(formats strfmt.Registry) error {

	if err := validate.Required("hours", "body", m.Hours); err != nil {
		return err
	}

	return nil
}

func (m *TransactionSignRequest) validateInputIndexes(formats strfmt.Registry) error {

	if err := validate.Required("input_indexes", "body", m.InputIndexes); err != nil {
		return err
	}

	return nil
}

func (m *TransactionSignRequest) validateInputs(formats strfmt.Registry) error {

	if err := validate.Required("inputs", "body", m.Inputs); err != nil {
		return err
	}

	return nil
}

func (m *TransactionSignRequest) validateOutputAddresses(formats strfmt.Registry) error {

	if err := validate.Required("output_addresses", "body", m.OutputAddresses); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionSignRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionSignRequest) UnmarshalBinary(b []byte) error {
	var res TransactionSignRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
