// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/skycoin/hardware-wallet-daemon/src/models"
)

// PostSetPinCodeReader is a Reader for the PostSetPinCode structure.
type PostSetPinCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSetPinCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostSetPinCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPostSetPinCodeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostSetPinCodeOK creates a PostSetPinCodeOK with default headers values
func NewPostSetPinCodeOK() *PostSetPinCodeOK {
	return &PostSetPinCodeOK{}
}

/*PostSetPinCodeOK handles this case with default header values.

success
*/
type PostSetPinCodeOK struct {
	Payload *models.HttpsuccessResponse
}

func (o *PostSetPinCodeOK) Error() string {
	return fmt.Sprintf("[POST /setPinCode][%d] postSetPinCodeOK  %+v", 200, o.Payload)
}

func (o *PostSetPinCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HttpsuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSetPinCodeConflict creates a PostSetPinCodeConflict with default headers values
func NewPostSetPinCodeConflict() *PostSetPinCodeConflict {
	return &PostSetPinCodeConflict{}
}

/*PostSetPinCodeConflict handles this case with default header values.

error
*/
type PostSetPinCodeConflict struct {
	Payload *models.HTTPErrorResponse
}

func (o *PostSetPinCodeConflict) Error() string {
	return fmt.Sprintf("[POST /setPinCode][%d] postSetPinCodeConflict  %+v", 409, o.Payload)
}

func (o *PostSetPinCodeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
