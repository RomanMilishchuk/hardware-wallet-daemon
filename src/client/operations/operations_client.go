// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWipe(params *DeleteWipeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWipeOK, error)

	GetAvailable(params *GetAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvailableOK, error)

	GetCsrf(params *GetCsrfParams) (*GetCsrfOK, error)

	GetFeatures(params *GetFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeaturesOK, error)

	GetVersion(params *GetVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionOK, error)

	PostApplySettings(params *PostApplySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplySettingsOK, error)

	PostBackup(params *PostBackupParams, authInfo runtime.ClientAuthInfoWriter) (*PostBackupOK, error)

	PostBitcoinTransactionSign(params *PostBitcoinTransactionSignParams, authInfo runtime.ClientAuthInfoWriter) (*PostBitcoinTransactionSignOK, error)

	PostCheckMessageSignature(params *PostCheckMessageSignatureParams, authInfo runtime.ClientAuthInfoWriter) (*PostCheckMessageSignatureOK, error)

	PostConfigurePinCode(params *PostConfigurePinCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PostConfigurePinCodeOK, error)

	PostGenerateAddresses(params *PostGenerateAddressesParams, authInfo runtime.ClientAuthInfoWriter) (*PostGenerateAddressesOK, error)

	PostGenerateMnemonic(params *PostGenerateMnemonicParams, authInfo runtime.ClientAuthInfoWriter) (*PostGenerateMnemonicOK, error)

	PostIntermediateButton(params *PostIntermediateButtonParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediateButtonOK, error)

	PostIntermediatePassphrase(params *PostIntermediatePassphraseParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediatePassphraseOK, error)

	PostIntermediatePinMatrix(params *PostIntermediatePinMatrixParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediatePinMatrixOK, error)

	PostIntermediateWord(params *PostIntermediateWordParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediateWordOK, error)

	PostRecovery(params *PostRecoveryParams, authInfo runtime.ClientAuthInfoWriter) (*PostRecoveryOK, error)

	PostSetMnemonic(params *PostSetMnemonicParams, authInfo runtime.ClientAuthInfoWriter) (*PostSetMnemonicOK, error)

	PostSignMessage(params *PostSignMessageParams, authInfo runtime.ClientAuthInfoWriter) (*PostSignMessageOK, error)

	PostTransactionSign(params *PostTransactionSignParams, authInfo runtime.ClientAuthInfoWriter) (*PostTransactionSignOK, error)

	PutCancel(params *PutCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PutCancelOK, error)

	PutFirmwareUpdate(params *PutFirmwareUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PutFirmwareUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWipe clean all the configurations.
*/
func (a *Client) DeleteWipe(params *DeleteWipeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWipe",
		Method:             "DELETE",
		PathPattern:        "/wipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAvailable check whether a skywallet is connected to the machine.
*/
func (a *Client) GetAvailable(params *GetAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*GetAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAvailable",
		Method:             "GET",
		PathPattern:        "/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAvailableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCsrf Returns csrf token
*/
func (a *Client) GetCsrf(params *GetCsrfParams) (*GetCsrfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCsrfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCsrf",
		Method:             "GET",
		PathPattern:        "/csrf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCsrfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCsrfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCsrfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFeatures Returns device information.
*/
func (a *Client) GetFeatures(params *GetFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFeatures",
		Method:             "GET",
		PathPattern:        "/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetVersion Returns daemon version information.
*/
func (a *Client) GetVersion(params *GetVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplySettings Apply hardware wallet settings.
*/
func (a *Client) PostApplySettings(params *PostApplySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplySettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplySettings",
		Method:             "POST",
		PathPattern:        "/apply_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplySettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplySettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostBackup Start seed backup procedure.
*/
func (a *Client) PostBackup(params *PostBackupParams, authInfo runtime.ClientAuthInfoWriter) (*PostBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBackup",
		Method:             "POST",
		PathPattern:        "/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostBitcoinTransactionSign Sign a Bitcoin transaction with the hardware wallet.
*/
func (a *Client) PostBitcoinTransactionSign(params *PostBitcoinTransactionSignParams, authInfo runtime.ClientAuthInfoWriter) (*PostBitcoinTransactionSignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBitcoinTransactionSignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBitcoinTransactionSign",
		Method:             "POST",
		PathPattern:        "/bitcoin_transaction_sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBitcoinTransactionSignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBitcoinTransactionSignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostBitcoinTransactionSignDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostCheckMessageSignature Check a message signature matches the given address.
*/
func (a *Client) PostCheckMessageSignature(params *PostCheckMessageSignatureParams, authInfo runtime.ClientAuthInfoWriter) (*PostCheckMessageSignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCheckMessageSignatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCheckMessageSignature",
		Method:             "POST",
		PathPattern:        "/check_message_signature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCheckMessageSignatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCheckMessageSignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCheckMessageSignatureDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostConfigurePinCode Configure a pin code on the device.
*/
func (a *Client) PostConfigurePinCode(params *PostConfigurePinCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PostConfigurePinCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostConfigurePinCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostConfigurePinCode",
		Method:             "POST",
		PathPattern:        "/configure_pin_code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostConfigurePinCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostConfigurePinCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostConfigurePinCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostGenerateAddresses Generate addresses for the hardware wallet seed.
*/
func (a *Client) PostGenerateAddresses(params *PostGenerateAddressesParams, authInfo runtime.ClientAuthInfoWriter) (*PostGenerateAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGenerateAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGenerateAddresses",
		Method:             "POST",
		PathPattern:        "/generate_addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGenerateAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGenerateAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGenerateAddressesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostGenerateMnemonic Generate mnemonic can be used to initialize the device with a random seed.
*/
func (a *Client) PostGenerateMnemonic(params *PostGenerateMnemonicParams, authInfo runtime.ClientAuthInfoWriter) (*PostGenerateMnemonicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGenerateMnemonicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGenerateMnemonic",
		Method:             "POST",
		PathPattern:        "/generate_mnemonic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGenerateMnemonicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGenerateMnemonicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGenerateMnemonicDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostIntermediateButton button ack request.
*/
func (a *Client) PostIntermediateButton(params *PostIntermediateButtonParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediateButtonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIntermediateButtonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIntermediateButton",
		Method:             "POST",
		PathPattern:        "/intermediate/button",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIntermediateButtonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIntermediateButtonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIntermediateButtonDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostIntermediatePassphrase passphrase ack request.
*/
func (a *Client) PostIntermediatePassphrase(params *PostIntermediatePassphraseParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediatePassphraseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIntermediatePassphraseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIntermediatePassphrase",
		Method:             "POST",
		PathPattern:        "/intermediate/passphrase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIntermediatePassphraseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIntermediatePassphraseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIntermediatePassphraseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostIntermediatePinMatrix pin matrix ack request.
*/
func (a *Client) PostIntermediatePinMatrix(params *PostIntermediatePinMatrixParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediatePinMatrixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIntermediatePinMatrixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIntermediatePinMatrix",
		Method:             "POST",
		PathPattern:        "/intermediate/pin_matrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIntermediatePinMatrixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIntermediatePinMatrixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIntermediatePinMatrixDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostIntermediateWord word ack request.
*/
func (a *Client) PostIntermediateWord(params *PostIntermediateWordParams, authInfo runtime.ClientAuthInfoWriter) (*PostIntermediateWordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIntermediateWordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIntermediateWord",
		Method:             "POST",
		PathPattern:        "/intermediate/word",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIntermediateWordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIntermediateWordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIntermediateWordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRecovery Recover existing wallet using seed.
*/
func (a *Client) PostRecovery(params *PostRecoveryParams, authInfo runtime.ClientAuthInfoWriter) (*PostRecoveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecoveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecovery",
		Method:             "POST",
		PathPattern:        "/recovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRecoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRecoveryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRecoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostSetMnemonic Set mnemonic can be used to initialize the device with your own seed.
*/
func (a *Client) PostSetMnemonic(params *PostSetMnemonicParams, authInfo runtime.ClientAuthInfoWriter) (*PostSetMnemonicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSetMnemonicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSetMnemonic",
		Method:             "POST",
		PathPattern:        "/set_mnemonic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSetMnemonicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSetMnemonicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSetMnemonicDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostSignMessage Sign a message using the secret key at given index.
*/
func (a *Client) PostSignMessage(params *PostSignMessageParams, authInfo runtime.ClientAuthInfoWriter) (*PostSignMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSignMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSignMessage",
		Method:             "POST",
		PathPattern:        "/sign_message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSignMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSignMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSignMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostTransactionSign Sign a Skycoin transaction with the hardware wallet.
*/
func (a *Client) PostTransactionSign(params *PostTransactionSignParams, authInfo runtime.ClientAuthInfoWriter) (*PostTransactionSignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTransactionSignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTransactionSign",
		Method:             "POST",
		PathPattern:        "/transaction_sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTransactionSignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTransactionSignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTransactionSignDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutCancel Cancels the current operation.
*/
func (a *Client) PutCancel(params *PutCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PutCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCancel",
		Method:             "PUT",
		PathPattern:        "/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCancelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutFirmwareUpdate Update firmware
*/
func (a *Client) PutFirmwareUpdate(params *PutFirmwareUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PutFirmwareUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFirmwareUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFirmwareUpdate",
		Method:             "PUT",
		PathPattern:        "/firmware_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutFirmwareUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFirmwareUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutFirmwareUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
