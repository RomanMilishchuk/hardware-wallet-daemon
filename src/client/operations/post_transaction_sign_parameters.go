// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/skycoin/hardware-wallet-daemon/src/models"
)

// NewPostTransactionSignParams creates a new PostTransactionSignParams object
// with the default values initialized.
func NewPostTransactionSignParams() *PostTransactionSignParams {
	var ()
	return &PostTransactionSignParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostTransactionSignParamsWithTimeout creates a new PostTransactionSignParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostTransactionSignParamsWithTimeout(timeout time.Duration) *PostTransactionSignParams {
	var ()
	return &PostTransactionSignParams{

		timeout: timeout,
	}
}

// NewPostTransactionSignParamsWithContext creates a new PostTransactionSignParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostTransactionSignParamsWithContext(ctx context.Context) *PostTransactionSignParams {
	var ()
	return &PostTransactionSignParams{

		Context: ctx,
	}
}

// NewPostTransactionSignParamsWithHTTPClient creates a new PostTransactionSignParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostTransactionSignParamsWithHTTPClient(client *http.Client) *PostTransactionSignParams {
	var ()
	return &PostTransactionSignParams{
		HTTPClient: client,
	}
}

/*PostTransactionSignParams contains all the parameters to send to the API endpoint
for the post transaction sign operation typically these are written to a http.Request
*/
type PostTransactionSignParams struct {

	/*TransactionSignRequest
	  TransactionSignRequest is request data for /api/v1/transactionSign

	*/
	TransactionSignRequest *models.TransactionSignRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post transaction sign params
func (o *PostTransactionSignParams) WithTimeout(timeout time.Duration) *PostTransactionSignParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post transaction sign params
func (o *PostTransactionSignParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post transaction sign params
func (o *PostTransactionSignParams) WithContext(ctx context.Context) *PostTransactionSignParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post transaction sign params
func (o *PostTransactionSignParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post transaction sign params
func (o *PostTransactionSignParams) WithHTTPClient(client *http.Client) *PostTransactionSignParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post transaction sign params
func (o *PostTransactionSignParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransactionSignRequest adds the transactionSignRequest to the post transaction sign params
func (o *PostTransactionSignParams) WithTransactionSignRequest(transactionSignRequest *models.TransactionSignRequest) *PostTransactionSignParams {
	o.SetTransactionSignRequest(transactionSignRequest)
	return o
}

// SetTransactionSignRequest adds the transactionSignRequest to the post transaction sign params
func (o *PostTransactionSignParams) SetTransactionSignRequest(transactionSignRequest *models.TransactionSignRequest) {
	o.TransactionSignRequest = transactionSignRequest
}

// WriteToRequest writes these params to a swagger request
func (o *PostTransactionSignParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TransactionSignRequest != nil {
		if err := r.SetBodyParam(o.TransactionSignRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
